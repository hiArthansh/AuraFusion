#include "DHT.h"
#define DHTPIN D1
#define LDRPIN A0
#define DHTTYPE DHT11
//lcd display code
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
LiquidCrystal_I2C lcd(0x27, 16, 2);

#include <Arduino.h>
#if defined(ESP32)
  #include <WiFi.h>
#elif defined(ESP8266)
  #include <ESP8266WiFi.h>
#endif
#include <Firebase_ESP_Client.h>

DHT dht(DHTPIN, DHTTYPE);

// Provide the token generation process info.
#include "addons/TokenHelper.h"
// Provide the RTDB payload printing info and other helper functions.
#include "addons/RTDBHelper.h"

// network credentials
#define WIFI_SSID "ARMTech 5G"
#define WIFI_PASSWORD "qwertyuiop"

// Firebase project API Key
#define API_KEY "AIzaSyDkVy-6kl8ECMbX7fWqkGqH0O_I_2w2Yzk"

// RTDB URL
#define DATABASE_URL "aurafusion-b522d-default-rtdb.firebaseio.com/" 

// Define Firebase Data object
FirebaseData fbdo; //sending and recieveing data to firebase

FirebaseAuth auth; //holding authentication credentials
FirebaseConfig config; //configuration settings stored

bool signupOK = false; //user-firebase authentication succesful or not
unsigned long maxDataAge = 24 * 60 * 60 * 1000; // Maximum age of data (24 hours in milliseconds)
unsigned long lastCleanupTime = 0; // Track the last time data was cleaned up

void setup(){
    //lcd code
  lcd.begin(16, 2);
  lcd.init();
  lcd.backlight();
  //displaying logo
  lcd.setCursor(4, 0);
  lcd.print("NAMASTE");
  lcd.setCursor(2, 1);
  lcd.print("AURAFUSION");
  delay(2000);
  pinMode(DHTPIN, INPUT);
  pinMode(LDRPIN, INPUT);
  dht.begin();
  Serial.begin(115200);
  // connecting to air
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to Wi-Fi");
  while (WiFi.status() != WL_CONNECTED){
    Serial.print(".");
    delay(300);
  }
  Serial.println();
  Serial.print("Connected with IP: ");
  Serial.println(WiFi.localIP());
  Serial.println();

  // Assign the api key fro connection
  config.api_key = API_KEY;

  // Assign the RTDB URL (required)
  config.database_url = DATABASE_URL;

  // attemts to Sign up with firebase
  if (Firebase.signUp(&config, &auth, "", "")){
    Serial.println("ok");
    signupOK = true;
    //indicating succesful authentication
  }
  else{
    Serial.printf("%s\n", config.signer.signupError.message.c_str());
    //sign up fails and print the error occured debugging
  }

  // Assign the callback function for the long running token generation task
  config.token_status_callback = tokenStatusCallback; // handle firebase token changes occured
  
  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);//wifi reconnection automation in case of lost internet

  //IP address displaying
  
  lcd.clear();
   lcd.setCursor(0, 0);
  lcd.print("IP ADDRESS");
  lcd.setCursor(0, 1);
  lcd.print(WiFi.localIP());
  delay(2000);
  lcd.clear();
}
void loop(){
    
  int sensorValue = analogRead(LDRPIN);   // read the input on analog pin 0
	float l = sensorValue * (3.3 / 1023.0);
  float h = 85;
  float t = 25.2;
  float p = 7.2;
  if (Firebase.ready() && signupOK) {
    String timeStamp = String(millis());

    // Store data with unique timestamp
    if (Firebase.RTDB.setFloat(&fbdo, "DHT/logs/" + timeStamp + "/humidity", h)) {
      Serial.print("Humidity: ");
      Serial.println(h);
      lcd.setCursor(0, 0);
      lcd.print("HM:");
      lcd.print(h);
      
    } else {
      Serial.println("FAILED");
      Serial.println("REASON: " + fbdo.errorReason());
    }
    
    if (Firebase.RTDB.setFloat(&fbdo, "DHT/logs/" + timeStamp + "/temperature", t)) {
      Serial.print("Temperature: ");
      Serial.println(t);
      lcd.setCursor(8,0);
      lcd.print("TP:");
      lcd.print(t);
    } else {
      Serial.println("FAILED");
      Serial.println("REASON: " + fbdo.errorReason());
    }

    //LDR data logging
    if (Firebase.RTDB.setFloat(&fbdo, "DHT/logs/" + timeStamp + "/sunlight", l)) {
      Serial.print("Sunlight% ");
           Serial.println(l);
            lcd.setCursor(0,1);
            lcd.print("SL:");
            lcd.print(l);
             //Serial.print(sensorValue);
    } else {
      Serial.println("FAILED");
      Serial.println("REASON: " + fbdo.errorReason());
    }
    if (Firebase.RTDB.setFloat(&fbdo, "DHT/logs/" + timeStamp + "/pH level", p)) {
      Serial.print("pH level:");
      Serial.println(p);
      lcd.setCursor(8,1);
      lcd.print("PH:");
      lcd.print(p);
    } else {
      Serial.println("FAILED");
      Serial.println("REASON: " + fbdo.errorReason());
    }

    // Cleanup old data every hour
    if (millis() - lastCleanupTime > 3600000) { // 1 hour
      cleanupOldData();
      lastCleanupTime = millis();
    }
  }
  Serial.println("______________________________");
}

// Function to delete old data
void cleanupOldData() {
  Serial.println("Cleaning up old data...");

  if (Firebase.RTDB.getJSON(&fbdo, "DHT/logs")) {
    FirebaseJson& json = fbdo.jsonObject();
    size_t dataCount = json.iteratorBegin();
    String key, value;
    int type;
    unsigned long currentTime = millis();

    for (size_t i = 0; i < dataCount; i++) {
      // Correct method to get key, value, and type
      json.iteratorGet(i, type, key, value);
      
      unsigned long entryTime = key.toInt();
      if ((currentTime - entryTime) > maxDataAge) {
        if (Firebase.RTDB.deleteNode(&fbdo, "DHT/logs/" + key)) {
          Serial.println("Deleted old data: " + key);
        } else {
          Serial.println("Failed to delete data: " + key);
          Serial.println("REASON: " + fbdo.errorReason());
        }
      }
    }
    json.iteratorEnd();
  } else {
    Serial.println("Failed to retrieve data for cleanup.");
    Serial.println("REASON: " + fbdo.errorReason());
  }
}


/*
#include <math.h>
void setup() {
  // put your setup code here, to run once:
Serial.begin(9600);
}

void loop() {
  // put your main code here, to run repeatedly:
  int a=random(100);
Serial.println(a);
}*/
